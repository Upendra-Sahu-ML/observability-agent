# Default values for observability-agent
# This is a YAML-formatted file.

# Global settings
global:
  # Image registry and repository prefix for all images
  imageRegistry: ""
  # Pull policy for all images
  imagePullPolicy: "IfNotPresent"
  # Image pull secrets for private registries
  imagePullSecrets: []

# OpenAI API settings
openai:
  # API key for OpenAI (required)
  apiKey: "your_openai_api_key"
  # Model to use (default: gpt-4)
  model: "gpt-4o-mini"

# NATS service configuration
nats:
  enabled: true
  image:
    repository: nats
    tag: "2.10-alpine"
    pullPolicy: IfNotPresent
  jetstream:
    # Enable JetStream file storage (recommended for production)
    enabled: true
  persistence:
    # Persistence settings for NATS
    enabled: true  # Disabled for local development - change to true for production
    # Storage size for NATS persistence
    size: 5Gi
    # Alternatively, use memory storage (faster but non-persistent)
    memStorage: 4G
    storageClass: ""  # Use default storage class
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

# NATS initialization job configuration
natsInit:
  image:
    repository: python
    tag: "3.10-slim"
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Database-Free Architecture
# This system uses pure NATS persistence - no Redis, MongoDB, or Qdrant required

# Common settings for all agents
agents:
  # Registry and repository for agent images
  imageRegistry: ""
  # Common environment variables for all agents
  env:
    - name: PYTHONUNBUFFERED
      value: "1"
  # Common resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Agent enablement configuration
  enabled:
    observability: true    # Consolidated agent (replaces metric, log, tracing)
    infrastructure: true   # Consolidated agent (replaces deployment, runbook)
    communication: true    # Consolidated agent (replaces notification, postmortem)
    metric: false          # Disabled when using consolidated observability agent
    log: false             # Disabled when using consolidated observability agent  
    tracing: false         # Disabled when using consolidated observability agent
    deployment: false      # Disabled when using consolidated infrastructure agent
    runbook: false         # Disabled when using consolidated infrastructure agent
    rootCause: true
    notification: false    # Disabled when using consolidated communication agent
    postmortem: false      # Disabled when using consolidated communication agent

# Consolidated Observability Agent configuration (replaces metric, log, tracing agents)
observabilityAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-observability-agent
    tag: latest
  # Resource settings (increased since it handles 3 agents' workload)
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  # Additional environment variables
  env: []
  # Data source configurations
  prometheus:
    url: "http://prometheus-server.monitoring:9090"
  loki:
    url: "http://loki.monitoring:3100"
  tempo:
    url: "http://tempo.monitoring:3200"

# Consolidated Infrastructure Agent configuration (replaces deployment, runbook agents)
infrastructureAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-infrastructure-agent
    tag: latest
  # Resource settings (increased since it handles infrastructure operations)
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  # Additional environment variables
  env: []
  # Infrastructure service configurations
  argocd:
    server: "https://argocd-server.argocd:443"
  git:
    enabled: false
    repoPath: "/app/repo"
    credentialsSecret: "git-credentials"
  runbooks:
    enabled: false
    directory: "/runbooks"
    configMap: "runbooks-config"
  # Kubernetes configuration
  kubeconfig:
    enabled: true
    secretName: "kubeconfig"
  # RBAC configuration
  rbac:
    create: true

# Consolidated Communication Agent configuration (replaces notification, postmortem agents)
communicationAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-communication-agent
    tag: latest
  # Resource settings (increased since it handles communication operations)
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  # Additional environment variables
  env: []
  # Notification service configurations
  slack:
    enabled: false
    botToken: ""
    channel: "#alerts"
  webex:
    enabled: false
    botToken: ""
    roomId: ""
  pagerduty:
    enabled: false
    integrationKey: ""
    serviceId: ""
  # Postmortem template configuration
  templates:
    enabled: false
    directory: "/templates"
    configMap: "postmortem-templates"

# Orchestrator configuration
orchestrator:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-orchestrator
    tag: latest
  # Service settings
  service:
    type: ClusterIP
    port: 80
  # Resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Additional environment variables
  env: []

# Root Cause Agent configuration
rootCauseAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-root-cause-agent
    tag: latest
  # Resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Additional environment variables
  env: []

# Knowledge base configuration
knowledgeBase:
  qdrant:
    url: http://qdrant:6333
  postmortemTemplateDir: /app/templates
  runbookDir: /app/runbooks

# Unified Backend configuration (replaces ui-backend, k8s-command-backend, and MongoDB)
unifiedBackend:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-unified-backend
    tag: latest
  # Service settings
  service:
    type: ClusterIP
    port: 5000
  # Resource settings (optimized for consolidated workload)
  resources:
    requests:
      memory: "300Mi"
      cpu: "150m"
    limits:
      memory: "600Mi"
      cpu: "400m"
  # Cache configuration
  cacheTTL: 300000  # 5 minutes in milliseconds
  # Kubernetes configuration
  kubeconfig:
    enabled: true
    secretName: "kubeconfig"
  # Additional environment variables
  env: []

# UI configuration
ui:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-ui
    tag: latest
  # Service settings
  service:
    type: ClusterIP
    port: 80
  # Resource settings
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"
  # Additional environment variables
  env: []

